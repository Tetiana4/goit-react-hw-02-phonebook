{"version":3,"sources":["Component/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","state","name","number","nameInputId","uuidv4","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","console","log","props","propSubmit","resetForm","onSubmit","this","htmlFor","type","pattern","title","required","onChange","id","Component","App","contacts","filter","formSubmitHandler","data","addContact","contact","changeFilter","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAsEeA,E,4MAlEbC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAEVC,YAAcC,c,EACdC,cAAgBD,c,EAEhBE,aAAe,SAAAC,GACb,MAAwBA,EAAMC,cAAtBP,EAAR,EAAQA,KAAMQ,EAAd,EAAcA,MAEd,EAAKC,SAAL,eACGT,EAAOQ,K,EAIZE,aAAe,SAAAJ,GACbA,EAAMK,iBACNC,QAAQC,IAAI,EAAKd,OACjB,EAAKe,MAAMC,WAAW,EAAKhB,OAC3B,EAAKiB,a,EAGPA,UAAY,WACV,EAAKP,SAAS,CACZT,KAAM,GACNC,OAAQ,M,4CAIZ,WACE,OACE,gCACE,2CACA,uBAAMgB,SAAUC,KAAKR,aAArB,UACE,wBAAOS,QAASD,KAAKhB,YAArB,iBAEE,uBACEkB,KAAK,OACLpB,KAAK,OACLqB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRf,MAAOU,KAAKnB,MAAMC,KAClBwB,SAAUN,KAAKb,aACfoB,GAAIP,KAAKhB,iBAGb,wBAAOiB,QAASD,KAAKd,cAArB,mBAEE,uBACEgB,KAAK,MACLpB,KAAK,SACLqB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRf,MAAOU,KAAKnB,MAAME,OAClBuB,SAAUN,KAAKb,aACfoB,GAAIP,KAAKd,mBAGb,wBAAQgB,KAAK,SAAb,mC,GA7DSM,aC2DJC,E,4MAxDb5B,MAAQ,CACN6B,SAAU,CACR,CAAEH,GAAI,OAAQzB,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEwB,GAAI,OAAQzB,KAAM,iBAAkBC,OAAQ,aAC9C,CAAEwB,GAAI,OAAQzB,KAAM,gBAAiBC,OAAQ,aAC7C,CAAEwB,GAAI,OAAQzB,KAAM,iBAAkBC,OAAQ,cAEhD4B,OAAQ,I,EAGVC,kBAAoB,SAAAC,GAClBnB,QAAQC,IAAIkB,I,EAGd1B,aAAe,SAAAC,GACb,MAA0BA,EAAMC,cAAxBsB,EAAR,EAAQA,OAAQrB,EAAhB,EAAgBA,MAEhB,EAAKC,SAAL,eACGoB,EAASrB,K,EAIdwB,WAAa,SAAAD,GACX,IAAME,EAAU,CACdR,GAAItB,cACJH,KAAM+B,EAAK/B,KACXC,OAAQ8B,EAAK9B,QAGf,EAAKQ,UAAS,gBAAGmB,EAAH,EAAGA,SAAH,MAAmB,CAC/BA,SAAS,GAAD,mBAAMA,GAAN,CAAgBK,S,EAG5BC,aAAe,SAAA5B,GACb,EAAKG,SAAS,CAAEoB,OAAQvB,EAAMC,cAAcC,S,4CAE9C,WACE,OACE,qCACE,cAAC,EAAD,CAAMO,WAAYG,KAAKc,aACvB,0CACA,sDACA,uBAAOP,GAAIP,KAAKlB,KAAhB,SACE,uBAAOoB,KAAK,OAAOZ,MAAOU,KAAKnB,MAAM8B,OAAQL,SAAUN,KAAKgB,aAAclC,KAAK,aAEjF,6BACGkB,KAAKnB,MAAM6B,SAASO,KAAI,SAAAF,GAAO,OAC9B,+BACGA,EAAQjC,KADX,KACmBiC,EAAQhC,SADlBgC,EAAQR,gB,GAhDXC,aCOHU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.28bd6f99.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    console.log(this.state);\n    this.props.propSubmit(this.state);\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor={this.nameInputId}>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              value={this.state.name}\n              onChange={this.handleChange}\n              id={this.nameInputId}\n            />\n          </label>\n          <label htmlFor={this.numberInputId}>\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n              value={this.state.number}\n              onChange={this.handleChange}\n              id={this.numberInputId}\n            />\n          </label>\n          <button type=\"submit\">Add contact</button>\n        </form>\n      </div>\n    );\n  }\n}\nexport default Form;\n","import React, { Component } from 'react';\nimport Form from './Component/Form';\nimport { v4 as uuidv4 } from 'uuid';\n// import Filter from './Component/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  formSubmitHandler = data => {\n    console.log(data);\n  };\n\n  handleChange = event => {\n    const { filter, value } = event.currentTarget;\n\n    this.setState({\n      [filter]: value,\n    });\n  };\n\n  addContact = data => {\n    const contact = {\n      id: uuidv4(),\n      name: data.name,\n      number: data.number,\n    };\n\n    this.setState(({ contacts }) => ({\n      contacts: [...contacts, contact],\n    }));\n  };\n  changeFilter = event => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n  render() {\n    return (\n      <>\n        <Form propSubmit={this.addContact} />\n        <h2>Contacts</h2>\n        <p>Find contacts by name</p>\n        <label id={this.name}>\n          <input type=\"text\" value={this.state.filter} onChange={this.changeFilter} name=\"filter\" />\n        </label>\n        <ul>\n          {this.state.contacts.map(contact => (\n            <li key={contact.id}>\n              {contact.name}: {contact.number}\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}